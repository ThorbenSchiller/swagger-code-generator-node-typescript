// tslint:disable
/* eslint-disable */
{{>licenseInfo}}
import Url from "url";
import fetch, {Response, RequestInit} from "node-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "{{{basePath}}}".replace(/\/+$/, "");

export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

class BaseAPI {
    protected readonly configuration: Configuration;
    protected readonly basePath: string;

    public constructor(configuration: Configuration = {}, basePath: string = BASE_PATH) {
        this.configuration = configuration;
        this.basePath = configuration.basePath ?? basePath;
    }

    protected getApiKeyFromConfiguration(paramName: string): Promise<string> {
        return typeof this.configuration.apiKey === 'function' ?
            this.configuration.apiKey(paramName) : Promise.resolve(this.configuration.apiKey!);
    }

    protected getAccessTokenFromConfiguration(name: string, scopes: ReadonlyArray<string>): Promise<string> {
        return typeof this.configuration.accessToken === 'function' ?
            this.configuration.accessToken(name, scopes) : Promise.resolve(this.configuration.accessToken!);
    }

    protected async performRequest<T>(url: string, options: RequestInit, returnJson?: boolean): Promise<T> {
        const response = await fetch(url, options);
        if (response.status >= 200 && response.status < 300) {
            return returnJson ? response.json() : response.text();
        }

        throw response;
    }
}

export class RequiredError extends Error {
    name = "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

function serialize(data: unknown, contentType?: string): string {
    return typeof data !== "string" || contentType === "application/json" ? JSON.stringify(data) : data;
}

/**
 * Verfies that the given parameter is not null or undefined.
 *
 * @param parameters The parameters to check.
 * @param requiredParameters The list of required parameters.
 * @param calledResource The resource this function was called from.
 */
function requireParameters(
    parameters: Record<string, unknown>,
    requiredParameters: ReadonlyArray<string>,
    calledResource: string,
): void {
    const missingParameter = requiredParameters
        .find(key => parameters[key] === null || parameters[key] === undefined);
    if (missingParameter) {
        throw new RequiredError(
             missingParameter,
            `Required parameter ${missingParameter} was null or undefined when calling ${calledResource}.`
        );
    }
}

{{#models}}
{{#model}}{{#isEnum}}{{>modelEnum}}{{/isEnum}}{{^isEnum}}{{>modelGeneric}}{{/isEnum}}{{/model}}
{{/models}}
{{#apiInfo}}{{#apis}}{{#operations}}
/**
 * {{classname}} - object-oriented interface{{#description}}
 * {{{description}}}{{/description}}
 */
{{#withInterfaces}}
export class {{classname}} extends BaseAPI implements {{classname}}Interface {
{{/withInterfaces}}
{{^withInterfaces}}
export class {{classname}} extends BaseAPI {
{{/withInterfaces}}
    {{#operation}}
    /**
     * {{&notes}}
     * {{#hasParams}}
     * @param params The parameters to pass.{{/hasParams}}
     * @param requestOptions Override http request option.
     * @throws RequiredError
     */
    public async {{nickname}}({{#hasParams}}
        params: {{=<% %>=}}{<%={{ }}=%>{{#allParams}}
            /**
             * @param {{paramName}} {{description}}
             */
            {{paramName}}{{^required}}?{{/required}}: {{{dataType}}},{{!--
        --}}{{/allParams}}{{=<% %>=}}
        }<%={{ }}=%>{{^hasRequiredParams}} = {}{{/hasRequiredParams}},{{/hasParams}}
        requestOptions: RequestInit = {}
    ): Promise<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}Response{{/returnType}}> {
        {{#hasParams}}{{!--
        --}}requireParameters(params, [{{#allParams}}{{#required}}
        '{{paramName}}',{{!--
            --}}{{/required}}{{/allParams}}
        ], '{{nickname}}');{{!--
        --}}{{/hasParams}}

        const configuration = this.configuration;
        const localVarPath = "{{{path}}}"{{#pathParams}}
            .replace({{=<% %>=}}"{<% baseName %>}"<%={{ }}=%>, encodeURIComponent(params.{{paramName}}.toString())){{/pathParams}};
        const localVarUrlObj = Url.parse(localVarPath, true);
        const localVarRequestOptions: RequestInit = {
            ...(configuration.fetchOptions || {}),
            ...requestOptions,
            method: '{{httpMethod}}'
        };
        const localVarHeaderParameter: Record<string, string> = {};
        {{#headerParams}}{{!--
        --}}{{^required}}
        if (params.{{paramName}} != null) { {{/required}}{{!--
        --}}{{#isListContainer}}{{!--
            --}}{{#isCollectionFormatMulti}}
            localVarHeaderParameter.{{paramName}} = params.{{paramName}};{{!--
            --}}{{/isCollectionFormatMulti}}{{!--
            --}}{{^isCollectionFormatMulti}}
            localVarHeaderParameter.{{paramName}} = params.{{paramName}}.join(COLLECTION_FORMATS["{{collectionFormat}}"]);{{!--
            --}}{{/isCollectionFormatMulti}}{{!--
        --}}{{/isListContainer}}{{!--
        --}}{{^isListContainer}}{{!--
            --}}{{#isDateTime}}
            localVarHeaderParameter.{{paramName}} = params.{{paramName}}.toISOString();{{!--
          --}}{{/isDateTime}}{{!--
            --}}{{^isDateTime}}{{#isDate}}
            localVarHeaderParameter.{{paramName}}: params.{{paramName}}.toISOString();{{!--
             --}}{{/isDate}}{{^isDate}}
            localVarHeaderParameter.{{paramName}} = params.{{paramName}}.toString();{{!--
            --}}{{/isDate}}{{/isDateTime}}{{!--
        --}}{{/isListContainer}}
        {{^required}}
        }{{/required}}{{/headerParams}}

        const localVarQueryParameter: Record<string, string> = {};
        {{#queryParams}}{{!--
        --}}{{^required}}if (params.{{paramName}} != null) { {{/required}}
        {{#isListContainer}}{{!--
            --}}{{#isCollectionFormatMulti}}
            localVarQueryParameter.{{paramName}} = params.{{paramName}};{{!--
            --}}{{/isCollectionFormatMulti}}{{!--
            --}}{{^isCollectionFormatMulti}}
            localVarQueryParameter.{{paramName}} = params.{{paramName}}.join(COLLECTION_FORMATS["{{collectionFormat}}"]);{{!--
            --}}{{/isCollectionFormatMulti}}{{!--
        --}}{{/isListContainer}}{{!--
        --}}{{^isListContainer}}{{!--
            --}}{{#isDateTime}}
            localVarQueryParameter.{{paramName}} = params.{{paramName}}.toISOString();{{!--
          --}}{{/isDateTime}}{{!--
            --}}{{^isDateTime}}{{#isDate}}
            localVarQueryParameter.{{paramName}}: params.{{paramName}}.toISOString();{{!--
             --}}{{/isDate}}{{^isDate}}
            localVarQueryParameter.{{paramName}} = params.{{paramName}}.toString();{{!--
            --}}{{/isDate}}{{/isDateTime}}{{!--
        --}}{{/isListContainer}}
        {{^required}}
        }{{/required}}{{/queryParams}}

        {{#authMethods}}
        // authentication {{name}} required
            {{#isApiKey}}
                {{#isKeyInHeader}}
        if (configuration?.apiKey) {
            localVarHeaderParameter["{{keyParamName}}"] = await this.getApiKeyFromConfiguration("{{keyParamName}}");
        }{{!--
                --}}{{/isKeyInHeader}}
                {{#isKeyInQuery}}
        if (configuration?.apiKey) {
            localVarQueryParameter["{{keyParamName}}"] = await this.getApiKeyFromConfiguration("{{keyParamName}}");
        }{{!--
                --}}{{/isKeyInQuery}}
            {{/isApiKey}}
            {{#isBasic}}
        // http basic authentication required
        if (configuration?.username configuration?.password) {
            localVarHeaderParameter["Authorization"] = `Basic ${btoa(configuration.username + ":" + configuration.password)}`;
        }{{!--
             --}}{{/isBasic}}
            {{#isOAuth}}
        // oauth required
        if (configuration?.accessToken) {
            const localVarAccessTokenValue = await this.getAccessTokenFromConfiguration(
                "{{name}}",
                [{{#scopes}}"{{{scope}}}"{{^-last}}, {{/-last}}{{/scopes}}],
            );
            localVarHeaderParameter["Authorization"] = `Bearer ${localVarAccessTokenValue}`;
        }{{!--
             --}}{{/isOAuth}}
        {{/authMethods}}

        {{#hasFormParams}}
        const localVarFormParams = new Url.URLSearchParams();
        {{/hasFormParams}}
        {{#formParams}}
            {{#isListContainer}}
                if ({{paramName}}) {
                {{#isCollectionFormatMulti}}
                    {{paramName}}.forEach((element) => {
                    localVarFormParams.append('{{baseName}}', element as any);
                    })
                {{/isCollectionFormatMulti}}
                {{^isCollectionFormatMulti}}
                    localVarFormParams.set('{{baseName}}', {{paramName}}.join(COLLECTION_FORMATS["{{collectionFormat}}"]));
                {{/isCollectionFormatMulti}}
                }
            {{/isListContainer}}
            {{^isListContainer}}
                if ({{paramName}} !== undefined) {
                localVarFormParams.set('{{baseName}}', {{paramName}} as any);
                }
            {{/isListContainer}}
        {{/formParams}}
        {{#hasFormParams}}
        const contentType = 'application/x-www-form-urlencoded';
        localVarHeaderParameter['Content-Type'] = contentType;
        {{/hasFormParams}}
        {{#bodyParam}}
        const contentType = '{{^consumes}}application/json{{/consumes}}{{#consumes.0}}{{{mediaType}}}{{/consumes.0}}';
        localVarHeaderParameter['Content-Type'] = contentType;
        {{/bodyParam}}
        localVarUrlObj.query = {
            ...localVarUrlObj.query,
            ...localVarQueryParameter,
        };
        // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
        delete localVarUrlObj.search;
        localVarRequestOptions.headers = {
            ...localVarHeaderParameter,
            ...requestOptions.headers,
        };
        {{#hasFormParams}}
            localVarRequestOptions.body = localVarFormParams.toString();
        {{/hasFormParams}}
        {{#bodyParam}}
            localVarRequestOptions.body = serialize(params.{{paramName}} || "", contentType);
        {{/bodyParam}}

        return this.performRequest(
            this.configuration.basePath + Url.format(localVarUrlObj),
            localVarRequestOptions,
            {{#returnType}}true{{/returnType}}{{^returnType}}false{{/returnType}},
        );
    }
    {{/operation}}
}
{{/operations}}{{/apis}}{{/apiInfo}}
